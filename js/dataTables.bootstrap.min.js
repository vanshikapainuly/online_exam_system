/*!
 * Custom DataTables and Bootstrap 3 Integration
 * (c) 2011-2015 SpryMedia Ltd - License available at datatables.net/license
 */

(function(factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD support
      define(['jquery', 'datatables.net'], function($) {
        return factory($, window, document);
      });
    } else if (typeof exports === 'object') {
      // Node/CommonJS environment
      module.exports = function($, windowInstance) {
        if (!windowInstance) {
          windowInstance = window;
        }
        if (!$.fn.dataTable) {
          require('datatables.net')(windowInstance, $);
        }
        return factory($, windowInstance, windowInstance.document);
      };
    } else {
      // Browser global
      factory(jQuery, window, document);
    }
  })(function($, window, document) {
    
    var DataTable = $.fn.dataTable;
  
    // Extend DataTables defaults for Bootstrap 3 styling
    $.extend(true, DataTable.defaults, {
      dom: 
        "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
        "<'row'<'col-sm-12'tr>>" +
        "<'row'<'col-sm-5'i><'col-sm-7'p>>",
      renderer: 'bootstrap'
    });
  
    // Define Bootstrap 3 specific classes
    $.extend(DataTable.ext.classes, {
      sWrapper: "dataTables_wrapper form-inline dt-bootstrap",
      sFilterInput: "form-control input-sm",
      sLengthSelect: "form-control input-sm",
      sProcessing: "dataTables_processing panel panel-default"
    });
  
    // Define Bootstrap 3 pagination control
    DataTable.ext.renderer.pageButton.bootstrap = function(settings, host, idx, buttons, page, pages) {
      var api = new DataTable.Api(settings);
      var classes = settings.oClasses;
      var language = settings.oLanguage.oPaginate;
      var aria = settings.oLanguage.oAria.paginate || {};
      var btnDisplay, btnClass, counter = 0;
  
      var attach = function(container, buttons) {
        var i, button, node, clickHandler = function(e) {
          e.preventDefault();
          if (!$(e.currentTarget).hasClass('disabled') && api.page() !== e.data.action) {
            api.page(e.data.action).draw('page');
          }
        };
  
        for (i = 0; i < buttons.length; i++) {
          button = buttons[i];
  
          if ($.isArray(button)) {
            attach(container, button);
          } else {
            btnDisplay = '';
            btnClass = '';
  
            switch (button) {
              case 'ellipsis':
                btnDisplay = '&#x2026;';
                btnClass = 'disabled';
                break;
  
              case 'first':
                btnDisplay = language.sFirst;
                btnClass = (page > 0 ? '' : 'disabled');
                break;
  
              case 'previous':
                btnDisplay = language.sPrevious;
                btnClass = (page > 0 ? '' : 'disabled');
                break;
  
              case 'next':
                btnDisplay = language.sNext;
                btnClass = (page < pages - 1 ? '' : 'disabled');
                break;
  
              case 'last':
                btnDisplay = language.sLast;
                btnClass = (page < pages - 1 ? '' : 'disabled');
                break;
  
              default:
                btnDisplay = button + 1;
                btnClass = (page === button ? 'active' : '');
                break;
            }
  
            if (btnDisplay) {
              node = $('<li>', {
                'class': classes.sPageButton + ' ' + btnClass,
                'id': (idx === 0 && typeof button === 'string') ? settings.sTableId + '_' + button : null
              })
              .append(
                $('<a>', {
                  href: '#',
                  'aria-controls': settings.sTableId,
                  'aria-label': aria[button],
                  'data-dt-idx': counter,
                  tabindex: settings.iTabIndex
                }).html(btnDisplay)
              )
              .appendTo(container);
  
              settings.oApi._fnBindAction(node, { action: button }, clickHandler);
              counter++;
            }
          }
        }
      };
  
      try {
        var active = $(host).find(document.activeElement).data('dt-idx');
      } catch (e) {}
  
      $(host).empty().html('<ul class="pagination"/>');
      attach($(host).children('ul'), buttons);
  
      if (active !== undefined) {
        $(host).find('[data-dt-idx=' + active + ']').focus();
      }
    };
  
    return DataTable;
  });
  